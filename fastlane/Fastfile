# Fastlane automation for giggles

before_all do
end

desc('Execute All Rake Tasks')
lane :pipeline do
  lint_test
  unit_test
  rspec_test
end

desc('Execute Rubocop Linting')
lane :lint_test do
  rubocop_cmd = []

  # (A/R/C/W/E/F)
  rubocop_cmd << 'bundle exec rubocop'
  rubocop_cmd << '--fail-level W'
  rubocop_cmd << '-r $(bundle show rubocop-junit-formatter)/lib/rubocop/formatter/junit_formatter.rb'
  rubocop_cmd << '--format RuboCop::Formatter::JUnitFormatter --out fastlane/reports/rubocop_junit.xml'
  rubocop_cmd << '--format progress'

  rubocop_cmd = rubocop_cmd.join(' ')

  Dir.chdir('..') { sh(rubocop_cmd) }
end

desc('Execute Unit Tests')
lane :unit_test do
  Dir.chdir('..') { sh('bundle exec danger plugins lint') }
end

desc('Execute Rspec Tests')
lane :rspec_test do
  rspec_cmd = []

  rspec_cmd << 'bundle exec rspec'
  rspec_cmd << '--failure-exit-code 0'
  rspec_cmd << '--no-drb'
  rspec_cmd << '--require rspec_junit_formatter --format RspecJunitFormatter'
  rspec_cmd << '--out fastlane/reports/rspec_junit.xml'
  rspec_cmd << '--format progress'

  rspec_cmd = rspec_cmd.join(' ')

  Dir.chdir('..') { sh(rspec_cmd) }
end

after_all do
  next unless is_ci?

  danger

  slack(
    message: 'CI Successfully Completed',
    channel: '#johnny-junk-drawer',
    default_payloads: [:lane, :last_git_commit_hash, :git_branch, :git_author],
    payload: {
      'Build Date' => Time.new.to_s,
      'Built by' => 'GitHub Actions'
    }
  )
end

error do |lane, exception|
  next unless is_ci?

  slack(
    success: false,
    message: exception.message
  )
end
